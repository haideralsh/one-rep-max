generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id               String             @id @default(cuid())
  email            String             @unique
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  entries          Entry[]
  password         Password?
  exerciseSettings ExerciseSettings[]
}

model Password {
  hash   String
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Exercise {
  id               String             @id @default(cuid())
  name             String             @unique
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  entries          Entry[]
  exerciseSettings ExerciseSettings[]
}

model Entry {
  id         String   @id @default(cuid())
  date       DateTime
  notes      String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  userId     String
  exerciseId String
  exercise   Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  sets       Set[]
}

model Set {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  weight    Decimal?
  reps      Int
  tracked   Boolean  @default(false)
  entryId   String
  entry     Entry    @relation(fields: [entryId], references: [id], onDelete: Cascade)
}

model ExerciseSettings {
  id         String   @id @default(cuid())
  unit       String   @default("pounds")
  userId     String
  exerciseId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  exercise   Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)

  @@unique([userId, exerciseId])
}
